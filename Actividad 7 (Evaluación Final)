% Limpieza de pantalla
clear all
close all
clc

tic
% Declaración de variables simbólicas
syms th1(t) th2(t) d3(t) th4(t) th5(t) th6(t) t  % Coordenadas generalizadas
syms th1p(t) th2p(t) d3p(t) th4p(t) th5p(t) th6p(t)  % Velocidades generalizadas
syms th1pp(t) th2pp(t) d3pp(t) th4pp(t) th5pp(t) th6pp(t) % Aceleraciones generalizadas
syms m1 m2 m3 m4 m5 m6 Ixx1 Iyy1 Izz1 Ixx2 Iyy2 Izz2 Ixx3 Iyy3 Izz3 Ixx4 Iyy4 Izz4 Ixx5 Iyy5 Izz5 Ixx6 Iyy6 Izz6
syms l1 l2 l3 l4 l5 l6 lc1 lc2 lc3 lc4 lc5 lc6 
syms pi g a cero

% Vector de coordenadas articulares
Q = [th1; th2; d3; th4; th5; th6];

% Vector de velocidades articulares
Qp = [th1p; th2p; d3p; th4p; th5p; th6p];

% Vector de aceleraciones articulares
Qpp = [th1pp; th2pp; d3pp; th4pp; th5pp; th6pp];

% Configuración del robot: 0 para rotacional, 1 para prismática
RP = [0 0 1 0 0 0];

% Número de grados de libertad (GDL)
GDL = size(RP,2);

% ------------------- ARTICULACIONES -------------------

% Articulación 1 (Rotación en Z)
P(:,:,1) = [0; 0; l1]; 
R(:,:,1) = [cos(th1) -sin(th1)  0;
            sin(th1)  cos(th1)  0;
            0         0         1];

% Articulación 2 (Rotación en Z, pero con -90° en X respecto a la anterior)
P(:,:,2) = [l2*cos(th2); l2*sin(th2); 0];
R(:,:,2) = [cos(th2) -sin(th2)  0;
            sin(th2)  cos(th2)  0;
            0         0         1] * ...
           [1  0   0;
            0  0  -1;
            0  1   0]; % Rotación de -90° en X

% Articulación 3 (Prismática en Z, con +90° en X respecto a la anterior)
P(:,:,3) = [0; 0; d3];
R(:,:,3) = [1  0   0;
            0  0   1;
            0 -1   0]; % Rotación de +90° en X

% Articulación 4 (Rotación en Z, mantiene marco)
P(:,:,4) = [0; 0; l4];
R(:,:,4) = [cos(th4) -sin(th4)  0;
            sin(th4)  cos(th4)  0;
            0         0         1];

% Articulación 5 (Rotación en Z, pero con -90° en X respecto a la anterior)
P(:,:,5) = [0; 0; l5];
R(:,:,5) = [cos(th5) -sin(th5)  0;
            sin(th5)  cos(th5)  0;
            0         0         1] * ...
           [1  0   0;
            0  0  -1;
            0  1   0]; % Rotación de -90° en X

% Articulación 6 (Rotación en Z, con +90° en X respecto a la anterior)
P(:,:,6) = [0; 0; 0];
R(:,:,6) = [cos(th6) -sin(th6)  0;
            sin(th6)  cos(th6)  0;
            0         0         1] * ...
           [1  0   0;
            0  0   1;
            0 -1   0]; % Rotación de +90° en X

% Vector de ceros
Vector_Zeros = zeros(1, 3);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%CALCULAMOS LAS VELOCIDADES PARA CADA ESLABÓN%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%  VELOCIDADES PARA ESLABÓN 6  %%%%%%%%%%

% Calculamos el jacobiano lineal de forma analítica
Jv_a6(:,GDL) = PO(:,:,GDL);
Jw_a6(:,GDL) = PO(:,:,GDL);

for k = 1:GDL
    if RP(k) == 0 
        % Para las juntas de revolución
        try
            Jv_a6(:,k) = cross(RO(:,3,k-1), PO(:,:,GDL) - PO(:,:,k-1));
            Jw_a6(:,k) = RO(:,3,k-1);
        catch
            Jv_a6(:,k) = cross([0,0,1], PO(:,:,GDL));
            Jw_a6(:,k) = [0,0,1];
        end
    else
        % Para las juntas prismáticas
        try
            Jv_a6(:,k) = RO(:,3,k-1);
        catch
            Jv_a6(:,k) = [0,0,1];
        end
        Jw_a6(:,k) = [0,0,0];
    end
end    

Jv_a6 = simplify(Jv_a6);
Jw_a6 = simplify(Jw_a6);
Jac6 = [Jv_a6;
        Jw_a6];
Jacobiano6 = simplify(Jac6);

V6 = simplify(Jv_a6 * Qp);
W6 = simplify(Jw_a6 * Qp);

%%%%%%%%%%  VELOCIDADES PARA ESLABÓN 5  %%%%%%%%%%

Jv_a5(:,GDL-1) = PO(:,:,GDL-1);
Jw_a5(:,GDL-1) = PO(:,:,GDL-1);

for k = 1:GDL-1
    if RP(k) == 0 
        try
            Jv_a5(:,k) = cross(RO(:,3,k-1), PO(:,:,GDL-1) - PO(:,:,k-1));
            Jw_a5(:,k) = RO(:,3,k-1);
        catch
            Jv_a5(:,k) = cross([0,0,1], PO(:,:,GDL-1));
            Jw_a5(:,k) = [0,0,1];
        end
    else
        try
            Jv_a5(:,k) = RO(:,3,k-1);
        catch
            Jv_a5(:,k) = [0,0,1];
        end
        Jw_a5(:,k) = [0,0,0];
    end
end    

Jv_a5 = simplify(Jv_a5);
Jw_a5 = simplify(Jw_a5);
Jac5 = [Jv_a5;
        Jw_a5];
Jacobiano5 = simplify(Jac5);

V5 = simplify(Jv_a5 * Qp(1:5));  
W5 = simplify(Jw_a5 * Qp(1:5));

%%%%%%%%%%  VELOCIDADES PARA ESLABÓN 4  %%%%%%%%%%

Jv_a4(:,GDL-2) = PO(:,:,GDL-2);
Jw_a4(:,GDL-2) = PO(:,:,GDL-2);

for k = 1:GDL-2
    if RP(k) == 0 
        try
            Jv_a4(:,k) = cross(RO(:,3,k-1), PO(:,:,GDL-2) - PO(:,:,k-1));
            Jw_a4(:,k) = RO(:,3,k-1);
        catch
            Jv_a4(:,k) = cross([0,0,1], PO(:,:,GDL-2));
            Jw_a4(:,k) = [0,0,1];
        end
    else
        try
            Jv_a4(:,k) = RO(:,3,k-1);
        catch
            Jv_a4(:,k) = [0,0,1];
        end
        Jw_a4(:,k) = [0,0,0];
    end
end    

Jv_a4 = simplify(Jv_a4);
Jw_a4 = simplify(Jw_a4);
Jac4 = [Jv_a4;
        Jw_a4];
Jacobiano4 = simplify(Jac4);

V4 = simplify(Jv_a4 * Qp(1:4));  
W4 = simplify(Jw_a4 * Qp(1:4));

%%%%%%%%%%  VELOCIDADES PARA ESLABÓN 3  %%%%%%%%%%

%Calculamos el jacobiano lineal y angular de forma analítica
Jv_a3(:,GDL-3)=PO(:,:,GDL-3);
Jw_a3(:,GDL-3)=PO(:,:,GDL-3);

for k= 1:GDL-3
    if RP(k)==0 
       %Para las juntas de revolución
        try
            Jv_a3(:,k)= cross(RO(:,3,k-1), PO(:,:,GDL-3)-PO(:,:,k-1));
            Jw_a3(:,k)= RO(:,3,k-1);
        catch
            Jv_a3(:,k)= cross([0,0,1], PO(:,:,GDL-3));
            Jw_a3(:,k)=[0,0,1];
         end
     else
%         %Para las juntas prismáticas
        try
            Jv_a3(:,k)= RO(:,3,k-1);
        catch
            Jv_a3(:,k)=[0,0,1];
        end
            Jw_a3(:,k)=[0,0,0];
     end
 end    

%Obtenemos SubMatrices de Jacobianos
Jv_a3= simplify (Jv_a3);
Jw_a3= simplify (Jw_a3);

%Matriz de Jacobiano Completa
Jac3= [Jv_a3;
      Jw_a3];
Jacobiano3= simplify(Jac3);

%Obtenemos vectores de Velocidades Lineales y Angulares para el eslabón 3
 disp('Velocidad lineal obtenida mediante el Jacobiano lineal del Eslabón 3');
V3=simplify (Jv_a3*Qp(1:3));  
pretty(V3)
 disp('Velocidad angular obtenida mediante el Jacobiano angular del Eslabón 3');
W3=simplify (Jw_a3*Qp(1:3));
pretty(W3)


%%%%%%%%%%  VELOCIDADES PARA ESLABÓN 2  %%%%%%%%%%%%%%%%%%%%%%%%%%

%Calculamos el jacobiano lineal y angular de forma analítica
Jv_a2(:,GDL-4)=PO(:,:,GDL-4);
Jw_a2(:,GDL-4)=PO(:,:,GDL-4);

for k= 1:GDL-4
    if RP(k)==0 
       %Para las juntas de revolución
        try
            Jv_a2(:,k)= cross(RO(:,3,k-1), PO(:,:,GDL-4)-PO(:,:,k-1));
            Jw_a2(:,k)= RO(:,3,k-1);
        catch
            Jv_a2(:,k)= cross([0,0,1], PO(:,:,GDL-4));
            Jw_a2(:,k)=[0,0,1];
         end
     else
%         %Para las juntas prismáticas
        try
            Jv_a2(:,k)= RO(:,3,k-1);
        catch
            Jv_a2(:,k)=[0,0,1];
        end
            Jw_a2(:,k)=[0,0,0];
     end
 end    

%Obtenemos SubMatrices de Jacobianos
Jv_a2= simplify (Jv_a2);
Jw_a2= simplify (Jw_a2);

%Matriz de Jacobiano Completa
Jac2= [Jv_a2;
      Jw_a2];
Jacobiano2= simplify(Jac2);

%Obtenemos vectores de Velocidades Lineales y Angulares para el eslabón 2
disp('Velocidad lineal obtenida mediante el Jacobiano lineal del Eslabón 2');
V2=simplify (Jv_a2*Qp(1:2));  
pretty(V2)
 disp('Velocidad angular obtenida mediante el Jacobiano angular del Eslabón 2');
W2=simplify (Jw_a2*Qp(1:2));
pretty(W2)


%%%%%%%%%%  VELOCIDADES PARA ESLABÓN 1  %%%%%%%%%%%%%%%%%%%%%%%%%%

%Calculamos el jacobiano lineal y angular de forma analítica
Jv_a1(:,GDL-5)=PO(:,:,GDL-5);
Jw_a1(:,GDL-5)=PO(:,:,GDL-5);

for k= 1:GDL-5
    if RP(k)==0 
       %Para las juntas de revolución
        try
            Jv_a1(:,k)= cross(RO(:,3,k-1), PO(:,:,GDL-5)-PO(:,:,k-1));
            Jw_a1(:,k)= RO(:,3,k-1);
        catch
            Jv_a1(:,k)= cross([0,0,1], PO(:,:,GDL-5));
            Jw_a1(:,k)=[0,0,1];
         end
     else
%         %Para las juntas prismáticas
        try
            Jv_a1(:,k)= RO(:,3,k-1);
        catch
            Jv_a1(:,k)=[0,0,1];
        end
            Jw_a1(:,k)=[0,0,0];
     end
 end    

%Obtenemos SubMatrices de Jacobianos
Jv_a1= simplify (Jv_a1);
Jw_a1= simplify (Jw_a1);

%Matriz de Jacobiano Completa
Jac1= [Jv_a1;
      Jw_a1];
Jacobiano1= simplify(Jac1);

%Obtenemos vectores de Velocidades Lineales y Angulares para el eslabón 1
 disp('Velocidad lineal obtenida mediante el Jacobiano lineal del Eslabón 1');
V1=simplify (Jv_a1*Qp(1:1));
pretty(V1)
 disp('Velocidad angular obtenida mediante el Jacobiano angular del Eslabón 1');
W1=simplify (Jw_a1*Qp(1:1));
pretty(W1)
%%%%%%%%%%  ENERGÍA CINÉTICA TOTAL  %%%%%%%%%%

P06 = subs(P(:,:,6), l6, lc6);
P05 = subs(P(:,:,5), l5, lc5);
P04 = subs(P(:,:,4), l4, lc4);
P03 = subs(P(:,:,3), l3, lc3);
P02 = subs(P(:,:,2), l2, lc2);
P01 = subs(P(:,:,1), l1, lc1);

I6 = [Ixx6 0 0; 0 Iyy6 0; 0 0 Izz6];
I5 = [Ixx5 0 0; 0 Iyy5 0; 0 0 Izz5];
I4 = [Ixx4 0 0; 0 Iyy4 0; 0 0 Izz4];
I3 = [Ixx3 0 0; 0 Iyy3 0; 0 0 Izz3];
I2 = [Ixx2 0 0; 0 Iyy2 0; 0 0 Izz2];
I1 = [Ixx1 0 0; 0 Iyy1 0; 0 0 Izz1];

K6 = (1/2*m6*(V6 + cross(W6, P06))') * (V6 + cross(W6, P06)) + (1/2*W6') * (I6 * W6);
K5 = (1/2*m5*(V5 + cross(W5, P05))') * (V5 + cross(W5, P05)) + (1/2*W5') * (I5 * W5);
K4 = (1/2*m4*(V4 + cross(W4, P04))') * (V4 + cross(W4, P04)) + (1/2*W4') * (I4 * W4);

K_Total = simplify(K6 + K5 + K4); % (Suma hasta K1)
disp('Energía Cinética Total');
pretty(K_Total);


